#!/usr/bin/env python2

import argparse
import re
import sys
import subprocess as sp
import os

base = 'dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 '
metadata = base + "org.freedesktop.DBus.Properties.Get string:'org.mpris.MediaPlayer2.Player' string:'{}'"
action = base + 'org.mpris.MediaPlayer2.Player.{}'

def fixenv():
    # Repairs the environment vars so dbus works
    try:
        # Get spotify's pid
        pid = sp.check_output([
            'pgrep', '-o', '-u',
            os.getenv('USER'),
            'spotify'
        ]).strip()

        # Dump it's environment
        with open('/proc/{}/environ'.format(pid)) as f:
            env = f.read().strip('\x00').split('\x00')

        # Find the dbus address and export that for us
        dbus_key = 'DBUS_SESSION_BUS_ADDRESS'
        dbus_val = next(v.split('=', 1)[1] for v in env if v.startswith(dbus_key))
        os.putenv(dbus_key, dbus_val)
    except sp.CalledProcessError:
        # Spotify probably isn't running
        pass

def get_status():
    status = sp.check_output(metadata.format('PlaybackStatus'), shell=True)
    print re.search(r'string "([^"]+)"', status).group(1)

def get_metadata(key):
    data = sp.check_output(metadata.format('Metadata'), shell=True)
    print re.search(r'string "([^"]+)"', data.split(key)[1]).group(1)

def send_action(a):
    print action.format(a)
    sp.call(action.format(a), shell=True)

opts = {
    'status': get_status,
    'artist': lambda: get_metadata('artist'),
    'song':   lambda: get_metadata('title'),
    'toggle': lambda: send_action('PlayPause'),
    'play':   lambda: send_action('Play'),
    'pause':  lambda: send_action('Pause'),
    'next':   lambda: send_action('Next'),
    'prev':   lambda: send_action('Previous'),
}

parser = argparse.ArgumentParser()
parser.add_argument('cmd', choices=opts.keys())
args = parser.parse_args(sys.argv[1:])

# fixenv()
opts[args.cmd]()
